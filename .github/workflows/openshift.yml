# Trigger the workflow on push to the main branch or manually
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Secrets for OpenShift access
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: "kilo-dev" # Change to your namespace
  APP_NAME: "my-azure-function" # Change to your app name
  APP_PORT: "8080" # Port your app listens to
  IMAGE_REGISTRY: "docker.io/mridul017" # Docker Hub username or other registry
  IMAGE_REGISTRY_USER: "mridul017" # Docker Hub username
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}

  # Default tag using git commit hash for better versioning
  IMAGE_TAGS: ${{ github.sha }}

jobs:
  build-and-deploy:
    name: Build and Deploy to OpenShift
    runs-on: ubuntu-20.04

    steps:
    # Checkout repository
    - name: Check out the repository
      uses: actions/checkout@v4

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Install oc CLI (OpenShift)
    - name: Install oc CLI (OpenShift)
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4.6.0

    # Build Docker image using Buildah
    - name: Build Docker image using Buildah
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.IMAGE_TAGS }}
        dockerfiles: ./DrinkApp/Dockerfile  # Correct path to Dockerfile
        context: ./DrinkApp

    # Push the built Docker image to Docker Hub
    - name: Push Docker image to Docker Hub
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}

    # Log in to OpenShift
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    # Deploy the application and expose as a service
    - name: Create and expose OpenShift app
      id: deploy-and-expose
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: ${{ env.APP_NAME }}
        image: ${{ steps.push-image.outputs.registry-path }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}
        
    # Expose the route with TLS termination (HTTPS)
    - name: Expose OpenShift route with TLS termination
      run: |
        oc expose deployment/${{ env.APP_NAME }} --name=${{ env.APP_NAME }}-route --port=${{ env.APP_PORT }} --hostname=${{ env.APP_NAME }}.${{ env.OPENSHIFT_NAMESPACE }}.example.com --tls-termination=edge --insecureEdgeTerminationPolicy=Redirect


    # Scale the application to ensure multiple pods for load balancing
    - name: Scale Deployment
      run: |
        oc scale deployment/${{ env.APP_NAME }} --replicas=3

    # Set up Horizontal Pod Autoscaler (HPA)
    - name: Configure Horizontal Pod Autoscaler
      run: |
        # Delete the existing Horizontal Pod Autoscaler if it exists
        if oc get hpa ${{ env.APP_NAME }} &>/dev/null; then
          echo "Horizontal Pod Autoscaler already exists. Deleting it."
          oc delete hpa ${{ env.APP_NAME }}
        fi
        # Create the new Horizontal Pod Autoscaler
        echo "Creating Horizontal Pod Autoscaler."
        oc autoscale deployment/${{ env.APP_NAME }} --min=2 --max=10 --cpu-percent=80
        
    # Wait for deployment rollout
    - name: Wait for Deployment Rollout
      run: |
        oc rollout status deployment/${{ env.APP_NAME }} --watch
        
    # Set up automatic rollback on failure
    - name: Enable Deployment Rollback on Failure
      run: |
        oc annotate deployment/${{ env.APP_NAME }} deployment.openshift.io/strategy=Rolling
        oc rollout undo deployment/${{ env.APP_NAME }} --to-revision=0

    # Inject environment variables into deployment
    - name: Set environment variables (Batch 1)
      run: |
        oc set env deployment/${{ env.APP_NAME }} dbkey=${{ secrets.DBKEY }}
        oc set env deployment/${{ env.APP_NAME }} DBURI=${{ secrets.DBURI }}
        oc set env deployment/${{ env.APP_NAME }} DBName=${{ secrets.DBNAME }}

    - name: Set environment variables (Batch 2)
      run: |
        oc set env deployment/${{ env.APP_NAME }} Key="${{ secrets.KEY }}"
        oc set env deployment/${{ env.APP_NAME }} Issuer="${{ secrets.ISSUER }}"
        oc set env deployment/${{ env.APP_NAME }} Audience="${{ secrets.AUDIENCE }}"

    - name: Set environment variables (Batch 3)
      run: |
        oc set env deployment/${{ env.APP_NAME }} SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
        oc set env deployment/${{ env.APP_NAME }} SENDER_ADDRESS=${{ secrets.SENDER_ADDRESS }}

    # Print application URL
    - name: Print Application URL
      run: |
        ROUTE=$(oc get route ${{ env.APP_NAME }} -o jsonpath='{.spec.host}')
        echo "Your app is available at: http://$ROUTE"
